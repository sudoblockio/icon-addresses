#name: push-main
#
## 1. Run unit and integration tests
## 2. Push containers to AWS ECR with tag based on incrementing build number
## 3. Recommit an update to the chart's deployments with the updated build number in the `deployment` branch
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  docker:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Create last_synced_block.txt
#        run: mkdir ./volumes && mkdir ./volumes/etl && echo "34000000" >> ./volumes/etl/last_synced_block.txt && chmod 777 ./volumes/etl/last_synced_block.txt
#
#      - name: Bring up DBs
#        run: docker-compose -f docker-compose.db.yml up -d && sleep 30
#
#      - name: Check DBs
#        run: make ps
#
#      - name: Run unit tests
#        run: cd src && go test -v -covermode=atomic -coverprofile=coverage.out ./...
#
#      - uses: codecov/codecov-action@v2
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          files: ./src/coverage.out
#          flags: unit
#          fail_ci_if_error: true
#
#      - name: Bring up stack
#        run: make up && sleep 30
#
#      - name: Check stack
#        run: make ps
#
#      - name: Check ETL logs
#        run: docker-compose -f docker-compose.yml -f docker-compose.db.yml logs --tail=100 etl
#
#      - name: Check worker logs
#        run: docker-compose -f docker-compose.yml -f docker-compose.db.yml logs --tail=100 addresses-worker
#
#      - name: Check api logs
#        run: docker-compose -f docker-compose.yml -f docker-compose.db.yml logs --tail=100 addresses-api
#
#      - name: Run integration tests
#        run: cd tests && go test -v -covermode=atomic -coverprofile=coverage.out ./...
#
#      - uses: codecov/codecov-action@v2
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          files: ./tests/coverage.out
#          flags: integration
#          fail_ci_if_error: true
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_WORKER }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_WORKER }}
#          aws-region: us-west-2
#
#      - name: Login to Amazon ECR
#        id: login-ecr-worker
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Worker - Build, tag, and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr-worker.outputs.registry }}
#          ECR_REPOSITORY: icon-addresses-worker
#          IMAGE_TAG: dev-${{ github.run_number }}
#        run: |
#          docker build --target prod --build-arg SERVICE_NAME=worker -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_API }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_API }}
#          aws-region: us-west-2
#
#      - name: Login to Amazon ECR
#        id: login-ecr-api
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: API - Build, tag, and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr-api.outputs.registry }}
#          ECR_REPOSITORY: icon-addresses-api
#          IMAGE_TAG: dev-${{ github.run_number }}
#        run: |
#          docker build --target prod  --build-arg SERVICE_NAME=api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#
#      - name: Checkout charts repo
#        uses: actions/checkout@v2
#        with:
#          repository: geometry-labs/icon-charts
#          ref: main
#          path: charts
#          token: ${{ secrets.ICON_CHARTS_PAT }}
#
#      - name: Update dev-mainnet deployment values file (API) and re-commit
#        uses: fjogeleit/yaml-update-action@master
#        with:
#          workDir: charts
#          repository: geometry-labs/icon-charts
#          valueFile: 'deployments/dev/mainnet/addresses/values.yaml'
#          propertyPath: 'api.image.tag'
#          value: dev-${{ github.run_number }}
#          branch: main
#          createPR: 'false'
#          updateFile: true
#          commitChange: false
#
#      - name: Update dev-mainnet deployment values file (WORKER) and re-commit
#        uses: fjogeleit/yaml-update-action@master
#        with:
#          workDir: charts
#          repository: geometry-labs/icon-charts
#          valueFile: 'deployments/dev/mainnet/addresses/values.yaml'
#          propertyPath: 'worker.image.tag'
#          value: dev-${{ github.run_number }}
#          branch: main
#          createPR: 'false'
#          message: 'addresses dev deployment (mainnet) image versions to ${{ github.run_number }}'
#          token: ${{ secrets.ICON_CHARTS_PAT }}
#          updateFile: true
